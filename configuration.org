* Emacs Configuration

This emacs configuration is inspired by Harry R. Schwartz's "Getting
started with Org mode" [[https://www.youtube.com/watch?v%3DSzA2YODtgK4][talk]].


* Package Manager Configuration

** Prevent package manager from polluting the init.el

#+BEGIN_SRC emacs-lisp
  (setq package--init-file-ensured t)
#+END_SRC


** Use the built-in (Emacs 24+) package manager

Look for packages in the GNU Emacs package repository as well as a few community repositories

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
#+END_SRC

Setup package load-paths so packages can be referenced later on in this configuration.

#+BEGIN_SRC emacs-lisp
  (package-initialize)
#+END_SRC


** Bootstrap the use-package package for declarative package management

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC


* Path Management

** Load the shell's PATH into the emacs path when using Mac OS

The path must explicitly be loaded into Emacs on Mac OS X. NOTE: this
happens automatically on Linux.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+END_SRC



* UI Preferences

** Initialize the color-theme

I prefer the [[https://github.com/morhetz/gruvbox][Gruvbox]] color theme

#+BEGIN_SRC emacs-lisp  (use-package gruvbox-theme
  (use-package gruvbox-theme
    :ensure t
    :config
    (load-theme 'gruvbox t))
#+END_SRC


** Hide emacs startup message

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC


** Disable default scratch buffer message

#+BEGIN_SRC emacs-lisp
  (setq-default initial-scratch-message nil)
#+END_SRC


** Disable menu, toolbar, and scrollbar UI elements

I don't use the menu or scrollbar UI elements so I disable them.

#+BEGIN_SRC emacs-lisp
  (use-package menu-bar
    :commands menu-bar-mode
    :init (menu-bar-mode -1))

  (use-package tool-bar
    :commands tool-bar-mode
    :init (tool-bar-mode -1))

  (use-package scroll-bar
    :commands scroll-bar-mode
    :init (scroll-bar-mode -1))
#+END_SRC

Always highlight the current line where the point is.

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC


** Show line and column numbers in the mode-line

#+BEGIN_SRC emacs-lisp
  (line-number-mode t)
  (column-number-mode t)
#+END_SRC


** Disable soft-line-wrapping

#+BEGIN_SRC emacs-lisp
  (setq-default truncate-lines t)
#+END_SRC


* Buffer preferences

** Ensure that files end with a newline character

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC


** Save on lose focus

Emacs auto-saves a buffer when I change buffers or Emacs loses focus.

#+BEGIN_SRC emacs-lisp
  (defun save-all ()
    "Save all open buffers"
      (interactive)
      (save-some-buffers t))

   (add-hook 'focus-out-hook 'save-all)

  (defadvice switch-to-buffer (before save-buffer-now activate)
    (when buffer-file-name (save-all)))
  (defadvice other-window (before other-window-now activate)
    (when buffer-file-name (save-all)))
#+END_SRC


** Remove trailing whitespace on save

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC


** Highlight pairs of context delimiting characters

For example: [], (), {}, et cetera.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC


** Insert matching pairs of delimiting characters

#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC


** Allow deletion of highlighted regions

#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC


** Prefer two space character indentation

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
#+END_SRC


* Auto-save and Backups Behavior

I like to keep all of Emacs' auto-generated saves and backups tidily
in a central place rather than littering the filesystem. Here I tell
emacs to redirect the generated files to a known directory when it
auto-saves.

#+BEGIN_SRC emacs-lisp
  (make-directory "~/.emacs.d/autosaves/" t)
  (make-directory "~/.emacs.d/backups/" t)

  (setq auto-save-file-name-transforms
        (quote ((".*" "~/.emacs.d/autosaves/\\1" t))))
  (setq backup-directory-alist
        (quote ((".*" . "~/.emacs.d/backups/"))))
#+END_SRC


* Automatic Hard Line-wrap

- Set the default hard line-wrap at 80 characters

- Enable automatic hard line-wrap for certain modes

#+BEGIN_SRC emacs-lisp
  (use-package fill
    :commands (auto-fill-mode)
    :init
    (set-fill-column 80)
    (add-hook 'markdown-mode-hook 'auto-fill-mode)
    (add-hook 'org-mode-hook 'auto-fill-mode))
#+END_SRC


* CSS and SASS editing

- Disable SASS compilation on save

#+BEGIN_SRC emacs-lisp
  (use-package sass-mode
    :ensure t
    :init
    (setq-default scss-compile-at-save nil))
#+END_SRC

- Prefer two space character indentation

#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :ensure t
    :init
    (setq css-indent-offset 2))
#+END_SRC


* Elixir

#+BEGIN_SRC emacs-lisp
  (use-package elixir-mode
    :ensure t)
#+END_SRC


* GitHub Gists

- Use gist to interact with http://gist.github.com

#+BEGIN_SRC emacs-lisp
  (use-package gist
    :ensure t)
#+END_SRC


* JavaScript editing

- Use js2-mode for JavaScript editing

- Prefer two space character indentation

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode
    ("\\.js\\'" . js2-mode)
    :init
    (setq js-indent-level 2)
    (setq-default js2-basic-offset 2))
#+END_SRC


* Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC


* Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+END_SRC


* Org

- Visually distinguish section header depth by setting line height

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :config
    (set-face-attribute 'org-level-1 nil :height 1.5)
    (set-face-attribute 'org-level-2 nil :height 1.25)
    (set-face-attribute 'org-level-3 nil :height 1.15)
    (set-face-attribute 'org-level-4 nil :height 1.05)
    (set-face-attribute 'org-level-5 nil :height 1.1))
#+END_SRC

- Use =org-bullets= for pretty bullet-ed lists

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :commands (org-bullets-mode)
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC


* Project navigation

- Use projectile for project navigation

#+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :init
      (setq projectile-enable-caching t)
      (setq projectile-indexing-method 'native)
      (setq projectile-completion-system 'ido)
      (add-hook 'elixir-mode-hook 'projectile-mode)
      (add-hook 'enh-ruby-mode-hook 'projectile-mode)
      (add-hook 'js2-mode-hook 'projectile-mode)
      (add-hook 'web-mode-hook 'projectile-mode))
#+END_SRC

- Require flx-ido for search completion

#+BEGIN_SRC emacs-lisp
  (use-package flx-ido
    :ensure t)
#+END_SRC

- Make projectile Rails-aware

#+BEGIN_SRC emacs-lisp
  (use-package projectile-rails
    :ensure t)
#+END_SRC


* Ruby

- Allow emacs to use =rbenv= to find project rubies

#+BEGIN_SRC emacs-lisp
  (use-package rbenv
    :ensure t
    :init
    (setq rbenv-installation-dir (file-chase-links "/usr/local/opt/rbenv")))
#+END_SRC

- Use =inf-ruby= for interactive ruby REPL

#+BEGIN_SRC emacs-lisp
  (use-package inf-ruby
    :ensure t)
#+END_SRC

- Enable =rpsec-mode= for in-editor test running

  - Set =comilation-scroll-output= to true so the rspec output buffer
    scrolls along with spec output

  - Add =inf-ruby-switch-setup= to the =rspec-mode= =after-init-hook=
    so tools like pry and byebug can debug inside the rspec-mode buffer

#+BEGIN_SRC emacs-lisp
  (use-package rspec-mode
    :ensure t
    :init
    (setq compilation-scroll-output t)
    (add-hook 'after-init-hook 'inf-ruby-switch-setup))
#+END_SRC

- Use "Enhanced Ruby Mode" to edit ruby-ish files

- Prevent =enh-ruby-mode= from adding the "Magic" encoding comment on
  save by setting =enh-ruby-add-encoding-comment-on-save= to false.

- Do not indent new lines to context depth, rather use a standard
  indentation. For example, format indentations like:

  #+BEGIN_EXAMPLE
  def foo(
    bar:,
    baz:
  )
    ...
  end
  #+END_EXAMPLE

  not like this:

  #+BEGIN_EXAMPLE
  def foo(
          bar:,
          baz:
         )
    ...
  end
  #+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package enh-ruby-mode
    :ensure t
    :init
    (setq enh-ruby-add-encoding-comment-on-save nil)
    (setq enh-ruby-deep-endent-paren nil)
    :mode
    (("\\.rb$" . enh-ruby-mode)
     ("\\.rake$" . enh-ruby-mode)
     ("Rakefile$" . enh-ruby-mode)
     ("\\.gemspec$" . enh-ruby-mode)
     ("\\.ru$" . enh-ruby-mode)
     ("Gemfile$" . enh-ruby-mode)
     ("Guardfile$" . enh-ruby-mode)))
#+END_SRC


* Spell Checking

- Tell =flyspell= to use the local ispell installation

- Lazily enable Flyspell for selected modes

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :commands (flyspell-prog-mode flyspell-mode)
    :init
    (setq ispell-program-name "/usr/local/bin/ispell")
    (add-hook 'enh-ruby-mode-hook 'flyspell-prog-mode)
    (add-hook 'markdown-mode-hook 'flyspell-mode)
    (add-hook 'org-mode-hook 'flyspell-mode)
    (add-hook 'text-mode-hook 'flyspell-mode))
#+END_SRC


* Web markup

- Use web-mode for editing web markup

- Prefer two space character indentation

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode
    ("\\.eex\\'" . web-mode)
    ("\\.erb\\'" . web-mode)
    ("\\.html\\'" . web-mode)
    :init
    (setq web-mode-markup-indent-offset 2))
#+END_SRC


* YAML

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC
